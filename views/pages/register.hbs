<!--Main layout--><!--Accordion wrapper-->
<main class="pt-5 mx-lg-5 accordion md-accordion" id="accordionCont" role="tablist" aria-multiselectable="true">
    <div class="container-fluid mt-5">

        <!-- Heading -->
        <div class="card mb-4 wow fadeIn">
            <div class="card-body d-sm-flex justify-content-between">
                <h4 class="mb-2 mb-sm-0 pt-1">
                <span>Register Citizen</span>
                </h4>
                <section class="d-flex justify-content-center">
                    {{!-- <button type="button" class="btn btn-primary">Check User</button> --}}
                    <div class="input-group mb-3">
                        <input type="text" id="singleID" name="singleID" class="form-control" placeholder="Citizen ID" 
                            aria-describedby="checkIDentity" aria-label="Citizen ID">
                        <div class="input-group-append">
                            <button class="btn btn-md btn-default m-0 px-3 py-2 z-depth-0 waves-effect" type="button" id="checkIDentity">Check Identity</button>
                        </div>
                    </div>
                </section>
            </div>
        </div>
        <!-- Heading -->

        <div class="row wow fadeIn main_cont">
            <div class="col-md-12 mb-4">
                {{> frscform }}
            </div>
        </div>

        <div class="row wow fadeIn main_cont">
            <div class="col-md-12 mb-4">
                <div class="card">
                    <!-- Card header -->
                    <div class="card-header" role="tab" id="recordTableHeading">
                        <a data-toggle="collapse" data-parent="#accordionCont" href="#recordTable" aria-expanded="true"
                            aria-controls="recordTable">
                            <h5 class="mb-0 text-dark">
                             Pending Citizen Records <i class="fas fa-angle-down rotate-icon"></i>
                            </h5>
                        </a>
                    </div>
                    <!-- Card body -->
                    <div id="recordTable" class="collapse show" role="tabpanel" aria-labelledby="recordTableHeading"
                    data-parent="#accordionCont">
                        <div class="card-body">
                            <table class="table table-hover">
                                <!-- Table head -->
                                <thead class="blue-grey lighten-4">
                                <tr>
                                    <th>#</th>
                                    <th>Surname</th>
                                    <th>Othernames</th>
                                    <th>Date of Birth</th>
                                    <th>Gender</th>
                                    <th>Driver License</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="wow fadeIn d-none history">
            <ul class="nav nav-tabs md-tabs" id="myTabMD" role="tablist">
                <li class="nav-item">
                    <a class="nav-link" id="closeHistory" href="javascript:void(0);">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" id="home-tab-md" data-toggle="tab" href="#home-md" role="tab" aria-controls="home-md"
                    aria-selected="true">Blocks History</a>
                </li>
            </ul>
            <div class="tab-content card pt-5" id="myTabContentMD">
                <div class="tab-pane fade show active" id="home-md" role="tabpanel" aria-labelledby="home-tab-md">
                    <div id="blockContainer" class="d-flex justify-content-start flex-wrap">
                        {{> blockinfo }}
                    </div>
                </div>
            </div>
        </div>

        {{> cameramodal }}

    </div>
</main>
<!--Main layout-->

{{> footer }}

{{!-- page level js below --}}
<script>
    var editedID;
    var citizens = [];
    var myblocks = {};
    var fileUrlstring = null;
    var blockTmp = $('.block')[0].outerHTML;

    const loadCitizen = () => {
        return new Promise((resolve,reject)=>{
            fetch('/api/getAll/mode=citizen', {
                method: 'GET',
            }).then(response => response.json())
            .then((res)=>{
                console.log(res);
                if(res.status == "success"){
                    resolve(res.data);
                }
                reject(res.data);
            });
        });        
    }

    const drawTable = () => {  
        loadCitizen().then((data)=>{
            var table = $('table tbody');   
            table.html('');
            citizens = data;
            if(!data.length) return false;  
            console.log(data); 
            //remove completed record
            data = data.filter( res => res.status == "pending");
            data.forEach(({ surname, othername, dob, driver_license, address, status, id, gender, fileurl },index)=>{      
                const tr = `<tr data-id="${id}" data-addr="${address}" data-fileurl="${fileurl}"><td>${index + 1}</td><td>${surname}</td><td>${othername}</td>
                <td>${dob}</td><td>${gender ? gender : "N/A"}</td><td>${driver_license}</td><td>${status}</td>
                <td>
                    <button class="btn btn-primary btn-sm my-0 p waves-effect waves-light edit">Edit</button>
                    <button class="btn btn-danger btn-sm my-0 p waves-effect waves-light remove">Remove</button>
                </td></tr>`;
                table.append(tr);
            });
        }).catch(err=> console.log(err));        
    }

    const prepareFormData = () => {
        let fieldData = {};
        //combine all ipfsData as one
        for(obj of myblocks.ipfsData){
          $.extend(fieldData, obj);
        }
        return fieldData;
    }

    const setFormfield = (obj) => {      
        //set id of the 
        editedID = obj.id;

        //set other form fields except name and gender fields
        for(prop in obj){
            if(prop !== "name") $('#'+ prop).val(obj[prop]);
        }
        //set gender
        (obj.gender && obj.gender == 'male') ? $("#male").prop('checked') : $("#female").prop('checked');

        //get names fields
        function getNames(){
            const name = obj.name;
            let nameArr = name.split(',');
            nameArr = nameArr.filter(val => val !== '');
            return nameArr;
        }
        //set names field
        function setNames(names){
            const nameFieldCount = $('.namefield').length;
            const nameCount = names.length;
            let str = '';
            switch(nameFieldCount){
                case 3:
                    //iterate and set all 3 fields -nimc/bank
                    names.forEach((val,index) => {
                        $('.namefield').eq(index).val(val);
                    });
                break;
                case 2:
                    //set first field -frsc
                    $('.namefield').eq(0).val(names[0]);
                    //get all remaining names
                    names.forEach((val,index) => {
                        if(index !== 0)
                            str += `${val} `;
                    });
                    //set remaining names to second field
                    $('.namefield').eq(1).val(str);
                break;
                case 1:
                    //get all names and set to field -frsc
                    str = names.join(' ');
                    $('.namefield').eq(0).val(str);
                break;
            }
        }

        const namesList = getNames();
        setNames(namesList);

        //set images
        if(obj.fileurl) {
            $('.image_container')
                .css('background-image', `url(https://ssoblockchain-api.herokuapp.com/uploads/${obj.fileurl})`)
                .addClass('has--image');
            $('.user-avatar').css('display','none');
        }else{
            $('.image_container')
                .css('background-image', '')
                .removeClass('has--image');
            $('.user-avatar').css('display','block');
        }
    }

    const captureImage = () => {
        Webcam.set({
          width: 320,
          height: 240,
          image_format: 'jpeg',
          jpeg_quality: 90
        });
        Webcam.attach('.my_camera');
    }

    const take_snapshot = () => {
        // take snapshot and get image data
        Webcam.snap(function(data_uri) {
            //set data url
            fileUrlstring = data_uri;
            // display results in page
            $('.modal').modal('hide');
            if(fileUrlstring !== null) {
                $('.image_container')
                .css('background-image', `url(${fileUrlstring})`)
                .addClass('has--image');
                $('.user-avatar').css('display','none');
            }else{
                $('.image_container')
                .css('background-image', '')
                .removeClass('has--image');
                $('.user-avatar').css('display','block');
            }
        });
    }

    const saveUserData = (postObj) => {
        fetch('/api/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(postObj)
        }).then(response => response.json())
        .then((data)=>{
            if(data.status == "success"){
                $('#clearform').trigger('click');
                window.location.reload();
                return alert(data.message);
            }
            return alert(data.message);
        });
    }

    const formatTimestamp = (t) => {
        let d = new Date(t);
        let format = `${d.getDate()}/${d.getMonth() + 1}/${d.getFullYear()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`;
        return format;
    }

    const drawBlocks = () => {
        //get blocks, ipfsData, ipfsHash     
        const { blocks, ipfsData, ipfsHash } = myblocks;
        const $cont = $('#blockContainer');
        $cont.html("");
        blocks.forEach((block,index)=>{
            let $newBlock = $(blockTmp);
            let $infoCont = $newBlock.find('.info-content');
            let itemStr = $infoCont.find('.block-item')[0].outerHTML;
            let $dataView = $newBlock.find('.data-view');
            $infoCont.html('');

            for(prop in block){
                let $item = $(itemStr);
                $item.find('.label').html(prop);
                (prop != 'timestamp')? ((prop == 'orgPublickey' || prop == 'previousHash' || prop == 'hash') ? 
                    $item.find('.value').html(block[prop].substr(0,30) + '...') : $item.find('.value').html(block[prop])) : $item.find('.value').html(formatTimestamp(block[prop]));
                $infoCont.append($item);
            }

            //build user data info on tooltip
            const userData = ipfsData[index];
            let htmlStr = '<ul class="list-group list-group-flus col-12 p-0 m-0">';
            for(prop in userData){
                if(prop == "publickey") break;
                const value = userData[prop];
                const tmp = `<li class="list-group-item block-item bg-dark d-flex flex-row flex-wrap justify-content-start align-items-center">
                    <span class="label font-weight-bold text-black small_font">${prop}</span>:<span class="value small_font">${value}</span></li>`;
                htmlStr += tmp;
            }    

            htmlStr += '</ul>';
            $dataView.attr('title',htmlStr);
            $cont.append($newBlock);
        });
        
        //init tooltip
        $('[data-toggle="tooltip"]').tooltip({
            template: `<div class="tooltip" role="tooltip">
                        <div class="arrow"></div>
                        <div class="tooltip-inner">
                        </div>
                    </div>`
        });
    }

    const getFormData = () => {
        formObj = {};
        $('form').serializeArray().forEach((elem)=>{
            const { name, value } = elem;
            let obj = {};
            obj[name] = value;
            $.extend(formObj, obj);
        })
        return formObj;
    }

    const validateForm = (formData, optional) => {
        const optionalFields = optional.split(',');
        let isValid = true;
        for(prop in formData){
            if(optionalFields.indexOf(prop) == -1 && formData[prop] == "") isValid = false;
        }
        console.log(formData);
        return isValid;
    }

    $('[name="save"]').click(function(e){
        e.preventDefault();
        const formData = getFormData();   
        const gender = $('input[type="radio"][name="gender"]:checked').val();

        const mode = 'citizen';
        const citizen = { ...formData, gender};

        const isValid = validateForm(citizen, 'middlename');        
        if(!isValid) return alert('Empty field not allowed');       

        if (fileUrlstring === null) return alert('You must upload a passport for identification');

        //1. upload image here and save new data
        fetch(`https://ssoblockchain-api.herokuapp.com/api/upload_passport`, {
          method: "POST",
          cache: "no-cache",
          headers: {
              "Content-Type": "application/json; charset=utf-8",
          },
          body: JSON.stringify({ fileUrlstring }),
        })
        .then(response => response.json())
        .then((res)=> {
            console.log('file upload res: ', res);
            //2. then save other form fields here
            const { status, message, data } = res;
            if (status == "success" && res && data) {
                let { fileurl } = data;
                const postObj = { citizen: {...citizen, fileurl }, mode };
                console.log(postObj);
                saveUserData(postObj);
            }
            
        });
    });

    $('[name="update"]').click(function(e){
        e.preventDefault();
        const id = editedID;
        const formData = getFormData();   
        const gender = $('input[type="radio"][name="gender"]:checked').val();

        const mode = 'citizen';
        const { status } = citizens.find(obj=>obj.id == editedID);
        const detail = { id, ...formData, gender, status};      

        const isValid = validateForm(detail, 'middlename');        
        if(!isValid) return alert('Empty field not allowed');       
        
        const postObj = { detail, mode };

        fetch('/api/updateCitizen', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(postObj)
        }).then(response => response.json())
        .then((data)=>{
            if(data.status == "success"){
                $('#clearform').trigger('click');
                window.location.reload();
                editedID = null;
                return alert(data.message);
            }
            return alert(data.message);
        })
    });

    $('[name="modify"]').click(function(e){
        e.preventDefault();
        const id = editedID;
        const formData = getFormData();   
        const gender = $("input[type='radio'][name='gender']:checked").val();

        const mode = 'citizen';
        const { publickey, userid } = myblocks.extras;

        const citizen = { id, ...formData, gender, publickey, userid};

        const isValid = validateForm(citizen, 'middlename');        
        if(!isValid) return alert('Empty field not allowed'); 

        const postObj = { citizen, mode };        
        saveUserData(postObj);
    });

    $('#clearform').click(function(e){
        e.preventDefault();
        $('input[type="text"]').val('');
        $('[name="update"]').addClass('d-none');
        $('[name="save"]').removeClass('d-none');
        $('#view_history').addClass('d-none');
        $('[name="modify"]').addClass('d-none');
        // set image 
        $('.image_container')
            .css('background-image', '')
            .removeClass('has--image');
        $('.user-avatar').css('display','block');
    });        

    $('#generateUniqueNo').click(function(){
        $('#driver_license').val(new Date().getTime());
    });

    $('#checkIDentity').click(function(e){
        const ssoID = $('#singleID').val();

        if(!ssoID) return alert('Enter user id');
        const { org } = $('#auth_user').data(); 

        console.log({ orgPublickey: org, ssoID });

        fetch('https://ssoblockchain-api.herokuapp.com/api/check_citizen', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orgPublickey: org, ssoID })
        }).then(response => response.json())
        .then((res)=>{
            if(res.status == "success"){
                //updateStatus
                myblocks = res.data;
                if(!myblocks) return alert('User does not exist, try again.');
                console.log(myblocks);
                $('#view_history').removeClass('d-none');
                //set mpodify button here
                $('[name="save"]').addClass('d-none');
                $('[name="modify"]').removeClass('d-none');
                $('.main_cont').show('fast');
                $('.history').addClass('d-none');
                setFormfield(prepareFormData());
                return;
            }
            return alert(res.message);
        });
    });

    $('#captureFace').click(captureImage);

    $('#view_history').on('click', function(){
        $('.main_cont').hide('fast');
        $('.history').removeClass('d-none');
        //display block history
        drawBlocks();
    });

    $('#closeHistory').on('click', function(){
        $('.main_cont').show('fast');
        $('.history').addClass('d-none');
    });

    /* camera capture */
    $('#take_snapshot').on('click', take_snapshot);

    $('body').on('click','.remove', function(){
        const id = $(this).closest('tr').data('id');
        const mode = 'citizen';

        if(!confirm('Are you sure')) return false;        

        fetch('/api/deleteOne', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ mode, id })
        }).then(response => response.json())
        .then((data)=>{
            if(data.status == "success"){
                $('#clearform').trigger('click');
                window.location.reload();
                editedID = null;
                return alert(data.message);
            }
            return alert(data.message);
        });
    });

    $('body').on('click','.edit', function(){        
        window.scrollTo(0,0);        
        editedID = $(this).closest('tr').data('id');        
        const editObj = citizens.find( c => c.id == editedID);
        const { gender, fileurl } = editObj;

        for(prop in editObj) {
            if(prop !== "gender") $(`input[name="${prop}"]`).val(editObj[prop]);
        }

        console.log({gender});        
        (gender && gender == 'male') ? $("#male").prop('checked', true) : $("#female").prop('checked', true);
        
        if(fileurl) {
            $('.image_container')
                .css('background-image', `url(https://ssoblockchain-api.herokuapp.com/uploads/${fileurl})`)
                .addClass('has--image');
            $('.user-avatar').css('display','none');
        }else{
            $('.image_container')
                .css('background-image', '')
                .removeClass('has--image');
            $('.user-avatar').css('display','block');
        }
        //toggle
        $('[name="update"]').removeClass('d-none');
        $('[name="save"]').addClass('d-none');
    });

    drawTable();

</script>
